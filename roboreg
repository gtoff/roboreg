#!/usr/bin/env python3
#
# Robot registry client

import urllib.request
import urllib.parse
import json
import sys
import time
import pickle
import hashlib
import os
import configparser

class Robot:
	def __init__(self, name, capabilities, timestamp=time.time(), properties=None):
		self.name = name
		self.capabilities = capabilities
		self.timestamp = timestamp
		self.properties = properties
		self.propertytimestamp = timestamp

	def _decay(self, timestamp):
		t = time.time()
		decay = "***"
		if t - timestamp > 10:
			decay = " **"
		if t - timestamp > 100:
			decay = "  *"
		if t - timestamp > 1000:
			decay = "   "
		return decay

	def __str__(self):
		capsort = list(self.capabilities.keys())[:]
		capsort.sort()
		capstr = hashlib.sha1(str(capsort).encode("utf-8")).hexdigest()[:6]
		rstr = "Robot {:s} / t={:d} / h={:s} [{:s}]".format(self.name, int(self.timestamp), capstr, self._decay(self.timestamp))
		return "\x1b[33m\x1b[1m{:s}\x1b[0m".format(rstr)

	def printcapabilities(self):
		for capability in self.capabilities:
			capstr = "- {:s} / {:s}".format(capability, ("available", "blocked")[self.capabilities[capability]])
			if self.capabilities[capability]:
				col = "\x1b[31m"
			else:
				col = "\x1b[32m"
			print("{:s}{:s}\x1b[0m".format(col, capstr))

	def printproperties(self):
		for property in self.properties:
			propstr = "+ {:s} = {:s} [{:s}]".format(property, str(self.properties[property]), self._decay(self.propertytimestamp))
			print("\x1b[33m{:s}\x1b[0m".format(propstr))

class Roboreg:
	def __init__(self):
		config = configparser.ConfigParser()
		config.read("roboreg.ini")
		if not "reg" in config.sections():
			print("Error: needs valid roboreg.ini.")
			sys.exit(1)
		self.username = config["reg"]["username"]
		self.password = config["reg"]["password"]
		self.eauth = config["reg"]["eauth"]
		self.saltapi = config["reg"]["saltapi"]
		self.cachedir = config["reg"]["cachedir"]

		self.robots = []

		self.load()

	def load(self):
		regpath = os.path.join(self.cachedir, "roboregistry")
		try:
			f = open(regpath, "rb")
			self.robots = pickle.load(f)
			f.close()
		except:
			pass

	def save(self):
		os.makedirs(self.cachedir, exist_ok=True)
		if not os.path.isdir(os.path.join(self.cachedir, ".git")):
			os.system("cd '{:s}' && git init -q".format(self.cachedir))
		regpath = os.path.join(self.cachedir, "roboregistry")
		f = open(regpath, "wb")
		pickle.dump(self.robots, f)
		f.close()
		os.system("cd {:s} && git add . && git commit -q -m reg".format(self.cachedir))

	def history(self):
		os.system("cd {:s} && git log --oneline".format(self.cachedir))

	def login(self):
		data = 'username={:s}&password={:s}&eauth={:s}'.format(self.username, self.password, self.eauth)
		f = urllib.request.urlopen("{:s}/login".format(self.saltapi), bytearray(data, "utf-8"))
		s = json.loads(f.read().decode("utf-8"))
		token = s["return"][0]["token"]
		return token

	def query(self, data, token):
		headers = {}
		headers["X-Auth-Token"] = token
		#headers["Content-Type"] = "application/json"
		req = urllib.request.Request(self.saltapi, bytearray(data, "utf-8"), headers)
		f = urllib.request.urlopen(req)
		s = json.loads(f.read().decode("utf-8"))
		return s

	def makedata(self, func, arglist=[]):
		data = []
		data.append(("client", "local"))
		data.append(("tgt", "*"))
		data.append(("fun", func))
		for arg in arglist:
			data.append(("arg", arg))
		data = urllib.parse.urlencode(data)
		return data

	def introspec(self, token):
		data = self.makedata("ros.introspec")
		#d = {}
		#for k, v in data:
		#	d[k] = v
		#data = json.dumps(d)
		s = self.query(data, token)
		returndata = s["return"][0]
		for name in returndata:
			capabilities = returndata[name]
			r = Robot(name, capabilities)
			for index, robot in enumerate(self.robots):
				if robot.name == r.name:
					self.robots.pop(index)
					break
			self.robots.append(r)
			print(r)

		self.save()

	def show(self):
		for r in self.robots:
			print(r)

	def showdetails(self, name):
		for r in self.robots:
			if r.name == name:
				print(r)
				r.printcapabilities()
				self.showproperties(name)
				return
		print("Error: robot not found.")

	def showproperties(self, name):
		token = self.login()
		data = self.makedata("ros.mergedproperties")
		s = self.query(data, token)
		returndata = s["return"][0]
		for name in returndata:
			for r in self.robots:
				if r.name == name:
					r.properties = returndata[name]
					r.propertytimestamp = time.time()
					r.printproperties()
					break

	def call(self, func, arglist):
		token = self.login()
		data = self.makedata("ros.{:s}".format(func), arglist)
		s = self.query(data, token)
		returndata = s["return"][0]
		print(returndata)

	def usage(self):
		print("Usage:")
		print("roboreg scan        - live-scan the network")
		print("        show        - show cached results")
		print("        show <name> - show details about a robot")
		print("        hist        - audit the history")
		print("        call <func> - call a function (with parameters)")

	def work(self):
		if len(sys.argv) == 1:
			self.usage()
			sys.exit(1)

		command = sys.argv[1]

		if command == "scan":
			token = self.login()
			self.introspec(token)
		elif command == "show":
			if len(sys.argv) == 2:
				self.show()
			elif len(sys.argv) == 3:
				self.showdetails(sys.argv[2])
			else:
				print("Error: invalid show subcommand.")
				sys.exit(1)
		elif command == "hist":
			self.history()
		elif command == "call":
			if len(sys.argv) >= 3:
				self.call(sys.argv[2], sys.argv[3:])
			else:
				print("Error: invalid call subcommand.")
				sys.exit(1)
		else:
			print("Error: invalid command.")
			sys.exit(1)

rreg = Roboreg()
rreg.work()
